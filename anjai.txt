folder api
  auth.js
   const express = require('express');
const passport = require('passport');
const GoogleStrategy = require('passport-google-oauth20').Strategy;
const jwt = require('jsonwebtoken');
const { sql } = require('./db'); // Import from db.js in api folder

const router = express.Router();

// Passport setup
passport.use(
  new GoogleStrategy(
    {
      clientID: process.env.GOOGLE_CLIENT_ID,
      clientSecret: process.env.GOOGLE_CLIENT_SECRET,
      callbackURL: 'https://www.mathsolve.my.id/api/auth/google/callback',
    },
    async (accessToken, refreshToken, profile, done) => {
      try {
        let user = await sql`SELECT * FROM users WHERE google_id = ${profile.id}`;
        if (user.length === 0) {
          const displayName = profile.displayName || profile.emails[0].value.split('@')[0];
          user = await sql`
            INSERT INTO users (google_id, email, display_name)
            VALUES (${profile.id}, ${profile.emails[0].value}, ${displayName})
            RETURNING *;
          `;
        }
        return done(null, user[0]);
      } catch (err) {
        console.error('Auth error:', err);
        return done(err);
      }
    }
  )
);

// Routes
router.get(
  '/google',
  passport.authenticate('google', { scope: ['profile', 'email'] })
);

router.get(
  '/google/callback',
  passport.authenticate('google', { session: false, failureRedirect: '/login.html' }),
  (req, res) => {
    try {
      // Validate JWT_SECRET
      if (!process.env.JWT_SECRET) {
        throw new Error('JWT_SECRET is not set in environment variables');
      }
      const token = jwt.sign(
        { id: req.user.id, email: req.user.email },
        process.env.JWT_SECRET,
        { expiresIn: '1h' }
      );
      res.redirect(`https://www.mathsolve.my.id/dashboard.html?token=${token}`);
    } catch (err) {
      console.error('Callback error:', err);
      res.redirect('/login.html?error=auth_failed');
    }
  }
);

router.get('/profile', async (req, res) => {
  try {
    const token = req.headers.authorization?.split(' ')[1]; // Fixed from previous error
    if (!token) {
      return res.status(401).json({ error: 'Unauthorized: No token provided' });
    }
    // Validate JWT_SECRET
    if (!process.env.JWT_SECRET) {
      throw new Error('JWT_SECRET is not set in environment variables');
    }
    const user = jwt.verify(token, process.env.JWT_SECRET);
    const userData = await sql`SELECT display_name, email FROM users WHERE id = ${user.id}`;
    if (userData.length === 0) {
      return res.status(404).json({ error: 'User not found' });
    }
    res.json({ name: userData[0].display_name, email: userData[0].email });
  } catch (err) {
    console.error('Profile fetch error:', err);
    if (err.name === 'TokenExpiredError') {
      return res.status(401).json({ error: 'Token expired' });
    }
    if (err.name === 'JsonWebTokenError') {
      return res.status(403).json({ error: 'Invalid token' });
    }
    res.status(500).json({ error: 'Server error' });
  }
});

router.get('/logout', (req, res) => {
  res.redirect('https://www.mathsolve.my.id/login.html');
});

module.exports = router;

db.js
 const { neon } = require('@neondatabase/serverless');

// Initialize the database connection
const sql = neon(process.env.NEON_DATABASE_URL || '');

// Initialize database tables and ensure schema
async function initDB() {
  try {
    if (!process.env.NEON_DATABASE_URL) {
      throw new Error('NEON_DATABASE_URL is not set in environment variables');
    }

    await sql`
      CREATE TABLE IF NOT EXISTS users (
        id SERIAL PRIMARY KEY,
        google_id VARCHAR(255) UNIQUE,
        email VARCHAR(255),
        display_name VARCHAR(255)
      );
    `;
    console.log('Users table checked/created');

    const columnCheck = await sql`
      SELECT column_name 
      FROM information_schema.columns 
      WHERE table_name = 'users' AND column_name = 'display_name';
    `;
    if (columnCheck.length === 0) {
      await sql`
        ALTER TABLE users ADD COLUMN display_name VARCHAR(255);
      `;
      console.log('Added display_name column to users table');
    } else {
      console.log('display_name column already exists in users table');
    }

    await sql`
      CREATE TABLE IF NOT EXISTS uploads (
        id SERIAL PRIMARY KEY,
        user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
        image_path VARCHAR(255),
        response TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );
    `;
    console.log('Uploads table checked/created');
  } catch (err) {
    console.error('Error initializing database:', err);
    throw err;
  }
}

// Retry logic for database initialization
async function initDBWithRetry(maxRetries = 3, retryDelayMs = 2000) {
  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      await initDB();
      console.log('Database initialized successfully');
      return;
    } catch (err) {
      console.error(`Attempt ${attempt} failed:`, err.message);
      if (attempt === maxRetries) {
        console.error('Max retries reached. Database initialization failed.');
        throw err;
      }
      await new Promise((resolve) => setTimeout(resolve, retryDelayMs));
    }
  }
}

module.exports = {
  sql,
  initDB: initDBWithRetry,
};
   
   index.js
      require('dotenv').config();
const express = require('express');
const path = require('path');
const authRoutes = require('./auth'); // Path relatif di folder api
const uploadRoutes = require('./upload'); // Path relatif di folder api
const { initDB } = require('./db'); // Path relatif di folder api

const app = express();

// Middleware
app.use(express.json());
app.use(express.static(path.join(__dirname, '../public'))); // public di root proyek

// Routes
app.use('/api/auth', authRoutes);
app.use('/api/upload', uploadRoutes);

// Serve frontend
app.get('*', (req, res) => {
  console.log('Serving index.html');
  res.sendFile(path.join(__dirname, '../public/index.html'));
});

// Initialize database and start server
async function startServer() {
  try {
    await initDB(); // Initialize database with retries
    console.log('Database initialized successfully');

    // Start server only for local development
    if (process.env.NODE_ENV !== 'production') {
      const PORT = process.env.PORT || 3000;
      app.listen(PORT, () => {
        console.log(`Server running on http://localhost:${PORT}`);
      });
    }
  } catch (err) {
    console.error('Failed to start server:', err);
    process.exit(1);
  }
}

startServer();

module.exports = app;
  

  upload.js
    const express = require('express');
const multer = require('multer');
const { GoogleGenerativeAI } = require('@google/generative-ai');
const rateLimit = require('express-rate-limit');
const jwt = require('jsonwebtoken');
const { sql } = require('./db');
const cheerio = require('cheerio');

const router = express.Router();
const genAI = new GoogleGenerativeAI(process.env.GOOGLE_API_KEY);
const model = genAI.getGenerativeModel({ model: 'gemini-2.0-flash' });

// Configure multer for in-memory storage
const upload = multer({
  storage: multer.memoryStorage(),
  limits: { fileSize: 5 * 1024 * 1024 } // 5MB limit
});

// Rate limiting configuration
const uploadLimiter = rateLimit({
  windowMs: 60 * 60 * 1000, // 1 hour
  max: 10,
  keyGenerator: (req) => req.user.id,
  handler: (req, res) => {
    res.status(429).json({
      error: 'Maaf, Anda telah mencapai batas 10 gambar per jam. Silakan tunggu hingga reset setiap jam.'
    });
  }
});

// Authentication middleware
const authenticate = (req, res, next) => {
  const token = req.headers.authorization?.split(' ')[1];
  if (!token) return res.status(401).json({ error: 'Unauthorized' });
  
  jwt.verify(token, process.env.JWT_SECRET, (err, user) => {
    if (err) return res.status(403).json({ error: 'Invalid token' });
    req.user = user;
    next();
  });
};

// Utility functions
function estimateTokens(text) {
  return Math.ceil(text.length / 4);
}

async function getUploadHistory(userId) {
  try {
    const history = await sql`
      SELECT response, created_at
      FROM uploads
      WHERE user_id = ${userId}
      ORDER BY created_at DESC
      LIMIT 3;
    `;
    return history.map(row => ({
      role: 'assistant',
      content: `Respons sebelumnya (pada ${row.created_at}): ${row.response}`
    }));
  } catch (err) {
    console.error('Error fetching upload history:', err);
    return [];
  }
}

function fileToGenerativePart(buffer, mimeType) {
  return {
    inlineData: {
      data: buffer.toString('base64'),
      mimeType
    },
  };
}

// Enhanced math notation formatter
function formatMathNotation(text) {
  if (!text || typeof text !== 'string') return text;
  
  try {
    let formatted = text;

    // First, handle bold text (**text**) to avoid conflict with italic (*text*)
    formatted = formatted.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');

    // Then, handle italic text (*text*), ensuring it doesn't conflict with bold
    formatted = formatted.replace(/(?<!\*)\*([^\*]+)\*(?!\*)/g, '<em>$1</em>');

    // Handle math notations
    formatted = formatted
      .replace(/lim_\{([^}]+)\}/g, '\\lim_{$1}')
      .replace(/\|([^|]+)\|/g, '\\|$1\\|')
      .replace(/(\d+)\/(\d+)/g, '\\frac{$1}{$2}')
      .replace(/(\w)\^(\d+)/g, '$1^{$2}')
      .replace(/sqrt\(([^)]+)\)/g, '\\sqrt{$1}')
      .replace(/(sin|cos|tan|cot|sec|csc)\(([^)]+)\)/g, '\\$1($2)');

    const greekSymbols = {
      'alpha': '\\alpha', 'beta': '\\beta', 'gamma': '\\gamma',
      'delta': '\\delta', 'epsilon': '\\epsilon', 'theta': '\\theta',
      'pi': '\\pi', 'sigma': '\\sigma', 'omega': '\\omega'
    };
    
    for (const [key, val] of Object.entries(greekSymbols)) {
      formatted = formatted.replace(new RegExp(key, 'g'), val);
    }

    formatted = formatted
      .replace(/<=/g, '\\leq')
      .replace(/>=/g, '\\geq')
      .replace(/!=/g, '\\neq');

    return formatted;
  } catch (error) {
    console.error('Math notation formatting error:', error);
    return text;
  }
}

// Enhanced response formatter with HTML structure
function formatResponseToHTML(response) {
  if (!response) return '';

  try {
    let formatted = formatMathNotation(response);

    const $ = cheerio.load('<div class="math-solution"></div>');
    const container = $('.math-solution');

    // Split into sections by double newlines
    const sections = formatted.split(/(?:\n\s*){2,}/);
    let stepCounter = 0;

    sections.forEach(section => {
      if (!section.trim()) return;

      // Only treat as a step if it explicitly starts with "Langkah" or "Step" followed by a number
      const isStep = section.match(/^(Langkah|Step)\s*\d+/i);

      if (isStep) {
        stepCounter++;
        const stepDiv = $('<div class="solution-step"></div>');
        
        const stepMatch = section.match(/^(Langkah|Step)\s*(\d+):?/i);
        const stepNumber = stepMatch ? stepMatch[2] : stepCounter;
        
        stepDiv.append(`<div class="step-number">${stepNumber}.</div>`);
        
        let content = section
          .replace(/^(Langkah|Step)\s*\d+:?\s*/i, '')
          .replace(/^\d+\.\s*/, '');
        
        const paragraphs = content.split('\n');
        
        paragraphs.forEach(para => {
          if (para.trim()) {
            stepDiv.append(`<p class="break-words">${para.trim()}</p>`);
          }
        });
        
        container.append(stepDiv);
      } else {
        // Remove any standalone numbers followed by a period (e.g., "6.", "10.")
        section = section.replace(/^\d+\.\s*/, '');
        if (section.trim()) {
          container.append(`<p class="break-words">${section}</p>`);
        }
      }
    });

    return $.html();
  } catch (error) {
    console.error('Response formatting error:', error);
    return response;
  }
}

// Main upload endpoint
router.post('/', authenticate, uploadLimiter, upload.single('image'), async (req, res) => {
  try {
    if (!req.file) {
      return res.status(400).json({ error: 'No image file provided' });
    }

    const { id: userId, email } = req.user;
    const fileBuffer = req.file.buffer;
    const mimeType = req.file.mimetype;
    const fileName = `${Date.now()}-${req.file.originalname}`;

    if (!process.env.GOOGLE_API_KEY) {
      throw new Error('GOOGLE_API_KEY is not configured');
    }

    const history = await getUploadHistory(userId);
    const historyText = history.map(msg => `${msg.role}: ${msg.content}`).join('\n');

    const prompt = `
Riwayat unggahan terbaru dari ${email.split('@')[0]}:
${historyText || 'Tidak ada riwayat unggahan sebelumnya.'}

Anda adalah ahli matematika. Analisis gambar soal matematika yang diunggah. Berikan solusi langkah demi langkah menggunakan metode yang paling umum dan mudah dipahami dalam bahasa Indonesia.

FORMAT RESPONS:
1. Gunakan notasi matematika yang tepat (contoh: \\(\\frac{1}{2}\\), \\(x^2\\), \\(\\sqrt{4}\\))
2. Pisahkan setiap langkah dengan jelas menggunakan "Langkah" di awal setiap langkah utama
3. Berikan penjelasan untuk setiap langkah
4. Gunakan format yang mudah dibaca
5. Gunakan **teks tebal** untuk penekanan
6. Gunakan *teks miring* untuk istilah penting
7. Jangan gunakan nomor acak untuk memisahkan bagian (seperti "6." atau "10.")

Jika gambar tidak berisi soal matematika, respons dengan: "Gambar ini tidak berisi soal matematika."
    `;

    const imagePart = fileToGenerativePart(fileBuffer, mimeType);
    const result = await model.generateContent([prompt, imagePart]);
    const responseText = result.response.text();

    const formattedResponse = formatResponseToHTML(responseText);

    await sql`
      INSERT INTO uploads (user_id, image_path, response)
      VALUES (${userId}, ${fileName}, ${responseText});
    `;

    const usageCount = await sql`
      SELECT COUNT(*) as count
      FROM uploads
      WHERE user_id = ${userId}
      AND created_at > NOW() - INTERVAL '1 hour';
    `;
    const used = parseInt(usageCount[0].count);
    const limit = 10;

    const response = {
      response: responseText,
      formatted_response: formattedResponse,
      usage: { used, limit },
      timestamp: new Date().toISOString()
    };

    if (used >= limit * 0.9) {
      response.warning = `Anda telah menggunakan ${used}/${limit} kuota. Reset dalam ${60 - new Date().getMinutes()} menit.`;
    }

    res.json(response);

  } catch (err) {
    console.error('Upload processing error:', err);
    
    const statusCode = err.message.includes('GOOGLE_API_KEY') ? 500 : 
                      err.message.includes('image') ? 400 : 500;
    
    res.status(statusCode).json({ 
      error: 'Maaf, terjadi kesalahan saat memproses gambar.',
      details: process.env.NODE_ENV === 'development' ? err.message : undefined
    });
  }
});

module.exports = router;

  upload.js
    const express = require('express');
const multer = require('multer');
const { GoogleGenerativeAI } = require('@google/generative-ai');
const rateLimit = require('express-rate-limit');
const jwt = require('jsonwebtoken');
const { sql } = require('./db');
const cheerio = require('cheerio');

const router = express.Router();
const genAI = new GoogleGenerativeAI(process.env.GOOGLE_API_KEY);
const model = genAI.getGenerativeModel({ model: 'gemini-2.0-flash' });

// Configure multer for in-memory storage
const upload = multer({
  storage: multer.memoryStorage(),
  limits: { fileSize: 5 * 1024 * 1024 } // 5MB limit
});

// Rate limiting configuration
const uploadLimiter = rateLimit({
  windowMs: 60 * 60 * 1000, // 1 hour
  max: 10,
  keyGenerator: (req) => req.user.id,
  handler: (req, res) => {
    res.status(429).json({
      error: 'Maaf, Anda telah mencapai batas 10 gambar per jam. Silakan tunggu hingga reset setiap jam.'
    });
  }
});

// Authentication middleware
const authenticate = (req, res, next) => {
  const token = req.headers.authorization?.split(' ')[1];
  if (!token) return res.status(401).json({ error: 'Unauthorized' });
  
  jwt.verify(token, process.env.JWT_SECRET, (err, user) => {
    if (err) return res.status(403).json({ error: 'Invalid token' });
    req.user = user;
    next();
  });
};

// Utility functions
function estimateTokens(text) {
  return Math.ceil(text.length / 4);
}

async function getUploadHistory(userId) {
  try {
    const history = await sql`
      SELECT response, created_at
      FROM uploads
      WHERE user_id = ${userId}
      ORDER BY created_at DESC
      LIMIT 3;
    `;
    return history.map(row => ({
      role: 'assistant',
      content: `Respons sebelumnya (pada ${row.created_at}): ${row.response}`
    }));
  } catch (err) {
    console.error('Error fetching upload history:', err);
    return [];
  }
}

function fileToGenerativePart(buffer, mimeType) {
  return {
    inlineData: {
      data: buffer.toString('base64'),
      mimeType
    },
  };
}

// Enhanced math notation formatter
function formatMathNotation(text) {
  if (!text || typeof text !== 'string') return text;
  
  try {
    let formatted = text;

    // First, handle bold text (**text**) to avoid conflict with italic (*text*)
    formatted = formatted.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');

    // Then, handle italic text (*text*), ensuring it doesn't conflict with bold
    formatted = formatted.replace(/(?<!\*)\*([^\*]+)\*(?!\*)/g, '<em>$1</em>');

    // Handle math notations
    formatted = formatted
      .replace(/lim_\{([^}]+)\}/g, '\\lim_{$1}')
      .replace(/\|([^|]+)\|/g, '\\|$1\\|')
      .replace(/(\d+)\/(\d+)/g, '\\frac{$1}{$2}')
      .replace(/(\w)\^(\d+)/g, '$1^{$2}')
      .replace(/sqrt\(([^)]+)\)/g, '\\sqrt{$1}')
      .replace(/(sin|cos|tan|cot|sec|csc)\(([^)]+)\)/g, '\\$1($2)');

    const greekSymbols = {
      'alpha': '\\alpha', 'beta': '\\beta', 'gamma': '\\gamma',
      'delta': '\\delta', 'epsilon': '\\epsilon', 'theta': '\\theta',
      'pi': '\\pi', 'sigma': '\\sigma', 'omega': '\\omega'
    };
    
    for (const [key, val] of Object.entries(greekSymbols)) {
      formatted = formatted.replace(new RegExp(key, 'g'), val);
    }

    formatted = formatted
      .replace(/<=/g, '\\leq')
      .replace(/>=/g, '\\geq')
      .replace(/!=/g, '\\neq');

    return formatted;
  } catch (error) {
    console.error('Math notation formatting error:', error);
    return text;
  }
}

// Enhanced response formatter with HTML structure
function formatResponseToHTML(response) {
  if (!response) return '';

  try {
    let formatted = formatMathNotation(response);

    const $ = cheerio.load('<div class="math-solution"></div>');
    const container = $('.math-solution');

    // Split into sections by double newlines
    const sections = formatted.split(/(?:\n\s*){2,}/);
    let stepCounter = 0;

    sections.forEach(section => {
      if (!section.trim()) return;

      // Only treat as a step if it explicitly starts with "Langkah" or "Step" followed by a number
      const isStep = section.match(/^(Langkah|Step)\s*\d+/i);

      if (isStep) {
        stepCounter++;
        const stepDiv = $('<div class="solution-step"></div>');
        
        const stepMatch = section.match(/^(Langkah|Step)\s*(\d+):?/i);
        const stepNumber = stepMatch ? stepMatch[2] : stepCounter;
        
        stepDiv.append(`<div class="step-number">${stepNumber}.</div>`);
        
        let content = section
          .replace(/^(Langkah|Step)\s*\d+:?\s*/i, '')
          .replace(/^\d+\.\s*/, '');
        
        const paragraphs = content.split('\n');
        
        paragraphs.forEach(para => {
          if (para.trim()) {
            stepDiv.append(`<p class="break-words">${para.trim()}</p>`);
          }
        });
        
        container.append(stepDiv);
      } else {
        // Remove any standalone numbers followed by a period (e.g., "6.", "10.")
        section = section.replace(/^\d+\.\s*/, '');
        if (section.trim()) {
          container.append(`<p class="break-words">${section}</p>`);
        }
      }
    });

    return $.html();
  } catch (error) {
    console.error('Response formatting error:', error);
    return response;
  }
}

// Main upload endpoint
router.post('/', authenticate, uploadLimiter, upload.single('image'), async (req, res) => {
  try {
    if (!req.file) {
      return res.status(400).json({ error: 'No image file provided' });
    }

    const { id: userId, email } = req.user;
    const fileBuffer = req.file.buffer;
    const mimeType = req.file.mimetype;
    const fileName = `${Date.now()}-${req.file.originalname}`;

    if (!process.env.GOOGLE_API_KEY) {
      throw new Error('GOOGLE_API_KEY is not configured');
    }

    const history = await getUploadHistory(userId);
    const historyText = history.map(msg => `${msg.role}: ${msg.content}`).join('\n');

    const prompt = `
Riwayat unggahan terbaru dari ${email.split('@')[0]}:
${historyText || 'Tidak ada riwayat unggahan sebelumnya.'}

Anda adalah ahli matematika. Analisis gambar soal matematika yang diunggah. Berikan solusi langkah demi langkah menggunakan metode yang paling umum dan mudah dipahami dalam bahasa Indonesia.

FORMAT RESPONS:
1. Gunakan notasi matematika yang tepat (contoh: \\(\\frac{1}{2}\\), \\(x^2\\), \\(\\sqrt{4}\\))
2. Pisahkan setiap langkah dengan jelas menggunakan "Langkah" di awal setiap langkah utama
3. Berikan penjelasan untuk setiap langkah
4. Gunakan format yang mudah dibaca
5. Gunakan **teks tebal** untuk penekanan
6. Gunakan *teks miring* untuk istilah penting
7. Jangan gunakan nomor acak untuk memisahkan bagian (seperti "6." atau "10.")

Jika gambar tidak berisi soal matematika, respons dengan: "Gambar ini tidak berisi soal matematika."
    `;

    const imagePart = fileToGenerativePart(fileBuffer, mimeType);
    const result = await model.generateContent([prompt, imagePart]);
    const responseText = result.response.text();

    const formattedResponse = formatResponseToHTML(responseText);

    await sql`
      INSERT INTO uploads (user_id, image_path, response)
      VALUES (${userId}, ${fileName}, ${responseText});
    `;

    const usageCount = await sql`
      SELECT COUNT(*) as count
      FROM uploads
      WHERE user_id = ${userId}
      AND created_at > NOW() - INTERVAL '1 hour';
    `;
    const used = parseInt(usageCount[0].count);
    const limit = 10;

    const response = {
      response: responseText,
      formatted_response: formattedResponse,
      usage: { used, limit },
      timestamp: new Date().toISOString()
    };

    if (used >= limit * 0.9) {
      response.warning = `Anda telah menggunakan ${used}/${limit} kuota. Reset dalam ${60 - new Date().getMinutes()} menit.`;
    }

    res.json(response);

  } catch (err) {
    console.error('Upload processing error:', err);
    
    const statusCode = err.message.includes('GOOGLE_API_KEY') ? 500 : 
                      err.message.includes('image') ? 400 : 500;
    
    res.status(statusCode).json({ 
      error: 'Maaf, terjadi kesalahan saat memproses gambar.',
      details: process.env.NODE_ENV === 'development' ? err.message : undefined
    });
  }
});

module.exports = router;

folder public
   dasboard.html
    <!DOCTYPE html>
<html lang="id">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>MathSolve AI | Solusi Matematika Cerdas</title>
  <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
  <script src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <link href="https://fonts.googleapis.com/css2?family=Plus+Jakarta+Sans:wght@300;400;500;600;700&display=swap" rel="stylesheet">
  <style>
    :root {
      --primary: #6C63FF;
      --primary-light: #8B85FF;
      --primary-dark: #534BC7;
      --secondary: #FF6584;
      --dark: #1A1A2E;
      --light: #F8F9FF;
      --gray: #E2E8F0;
      --dark-gray: #94A3B8;
    }
    
    body {
      font-family: 'Plus Jakarta Sans', sans-serif;
      background-color: var(--light);
      color: var(--dark);
      overflow-x: hidden;
    }

    /* Glassmorphism effect */
    .glass-card {
      background: rgba(255, 255, 255, 0.85);
      backdrop-filter: blur(12px);
      -webkit-backdrop-filter: blur(12px);
      border-radius: 16px;
      border: 1px solid rgba(255, 255, 255, 0.3);
      box-shadow: 0 8px 32px rgba(31, 38, 135, 0.1);
    }

    /* Modern scrollbar */
    ::-webkit-scrollbar {
      width: 8px;
      height: 8px;
    }

    ::-webkit-scrollbar-track {
      background: rgba(0, 0, 0, 0.05);
    }

    ::-webkit-scrollbar-thumb {
      background: var(--primary);
      border-radius: 10px;
    }

    /* Updated Math solution styling */
    .math-solution {
      font-family: 'Inter', sans-serif;
      line-height: 1.6;
      color: #374151;
      word-break: break-word;
      overflow-wrap: anywhere;
      white-space: normal;
      max-width: 100%;
      overflow-x: hidden;
      padding: 0.5rem;
      box-sizing: border-box;
      font-size: 1.05rem;
    }

    .math-solution h2 {
      font-size: 1.75rem;
      font-weight: 600;
      color: #1f2937;
      margin-bottom: 1rem;
      max-width: 100%;
      overflow-x: hidden;
    }

    .math-solution h3 {
      font-size: 1.5rem;
      font-weight: 600;
      color: #1f2937;
      margin: 1.5rem 0 1rem;
      max-width: 100%;
      overflow-x: hidden;
    }

    .math-solution p {
      margin-bottom: 1rem;
      word-break: break-word;
      overflow-wrap: anywhere;
      max-width: 100%;
      overflow-x: hidden;
      font-size: 1.05rem;
    }

    .solution-step {
      position: relative;
      padding-left: 2rem;
      margin-bottom: 1.5rem;
      word-break: break-word;
      overflow-wrap: anywhere;
      max-width: 100%;
      overflow-x: hidden;
    }

    .solution-step .step-number {
      position: absolute;
      left: 0;
      top: 0;
      color: var(--primary);
      font-weight: 600;
    }

    .math-step {
      margin-bottom: 1.5rem;
      padding-left: 1.5rem;
      border-left: 3px solid var(--primary);
      max-width: 100%;
      overflow-x: hidden;
    }

    .math-step-header {
      font-weight: 600;
      color: var(--primary);
      margin-bottom: 0.5rem;
      max-width: 100%;
      overflow-x: hidden;
    }

    .math-expression {
      display: inline-block;
      margin: 0.5rem 0;
      padding: 0.5rem;
      background-color: #f3f4f6;
      border-radius: 0.375rem;
      font-family: 'Times New Roman', serif;
      word-break: break-word;
      overflow-wrap: anywhere;
      max-width: 100%;
      overflow-x: auto;
      white-space: nowrap;
      box-sizing: border-box;
    }

    .math-section {
      margin-bottom: 2rem;
      max-width: 100%;
      overflow-x: hidden;
    }

    .math-section-title {
      font-weight: 600;
      color: #1f2937;
      margin-bottom: 0.75rem;
      padding-bottom: 0.25rem;
      border-bottom: 1px solid #e5e7eb;
      max-width: 100%;
      overflow-x: hidden;
    }

    .MathJax, .MathJax_Display {
      display: inline-block !important;
      max-width: 100% !important;
      white-space: normal !important;
      overflow-wrap: break-word !important;
      word-break: break-all !important;
      overflow-x: auto !important;
      box-sizing: border-box !important;
      padding: 0.2rem !important;
      font-size: 1em !important;
    }

    .solution-text-container {
      max-width: 100%;
      overflow-x: hidden;
      word-break: break-word;
      overflow-wrap: anywhere;
      padding: 0.5rem;
      box-sizing: border-box;
    }

    /* Responsive adjustments */
    @media (max-width: 768px) {
      .MathJax, .MathJax_Display {
        font-size: 0.9em !important;
        max-width: 100% !important;
        overflow-x: auto !important;
        display: inline-block !important;
      }
      .math-solution {
        font-size: 0.95rem;
        padding: 0.5rem;
      }
      .math-solution p {
        font-size: 0.95rem;
      }
      .solution-step {
        padding-left: 1.5rem;
      }
      .math-expression {
        font-size: 0.9rem;
        white-space: normal;
        overflow-x: auto;
      }
    }

    @media (max-width: 480px) {
      .MathJax, .MathJax_Display {
        font-size: 0.85em !important;
      }
      .math-solution {
        font-size: 0.9rem;
      }
      .math-solution h2 {
        font-size: 1.5rem;
      }
      .math-solution h3 {
        font-size: 1.3rem;
      }
      .math-expression {
        font-size: 0.85rem;
      }
    }

    /* New modern elements */
    .gradient-bg {
      background: linear-gradient(135deg, var(--primary) 0%, var(--secondary) 100%);
    }

    .floating-btn {
      box-shadow: 0 10px 25px -5px rgba(108, 99, 255, 0.4);
      transition: all 0.3s ease;
    }

    .floating-btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 15px 30px -5px rgba(108, 99, 255, 0.5);
    }

    .drop-zone-active {
      border-color: var(--primary) !important;
      background-color: rgba(108, 99, 255, 0.05) !important;
    }

    .pulse-animation {
      animation: pulse 2s infinite;
    }

    @keyframes pulse {
      0% {
        box-shadow: 0 0 0 0 rgba(108, 99, 255, 0.7);
      }
      70% {
        box-shadow: 0 0 0 10px rgba(108, 99, 255, 0);
      }
      100% {
        box-shadow: 0 0 0 0 rgba(108, 99, 255, 0);
      }
    }

    .slide-in {
      animation: slideIn 0.5s forwards;
    }

    @keyframes slideIn {
      from {
        opacity: 0;
        transform: translateY(20px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }

    .fade-in {
      animation: fadeIn 0.5s ease-in;
    }

    @keyframes fadeIn {
      from { opacity: 0; }
      to { opacity: 1; }
    }
  </style>
</head>
<body class="min-h-screen bg-gradient-to-br from-indigo-50 to-purple-50">
  <!-- Header -->
  <header class="sticky top-0 z-50">
    <div class="container mx-auto px-4 py-3">
      <nav class="flex items-center justify-between glass-card px-6 py-3">
        <div class="flex items-center space-x-3">
          <div class="gradient-bg p-2 rounded-xl text-white">
            <i class="fas fa-square-root-alt text-xl"></i>
          </div>
          <h1 class="text-xl font-bold bg-gradient-to-r from-purple-600 to-indigo-600 bg-clip-text text-transparent">MathSolve AI</h1>
        </div>
        
        <div class="flex items-center space-x-4">
          <div id="desktopUsageDisplay" class="hidden md:flex items-center space-x-2 bg-indigo-50 px-3 py-1 rounded-full">
            <span id="usageDisplay" class="text-xs font-medium text-indigo-700"></span>
            <div class="w-2 h-2 rounded-full bg-indigo-500 pulse-animation"></div>
          </div>
          
          <div class="relative">
            <button id="profileBtn" class="flex items-center focus:outline-none">
              <div class="w-9 h-9 rounded-full gradient-bg text-white flex items-center justify-center font-medium shadow-md">
                <span id="profileInitial">U</span>
              </div>
            </button>
            <div id="profileDropdown" class="hidden absolute right-0 mt-2 w-56 bg-white rounded-xl shadow-xl py-2 z-50 border border-gray-100">
              <div class="px-4 py-3 border-b border-gray-100">
                <p class="text-sm font-semibold text-gray-800" id="profileName"></p>
                <p class="text-xs text-gray-500 truncate" id="profileEmail"></p>
                <div id="mobileUsageDisplay" class="flex items-center space-x-2 mt-2 md:hidden">
                  <span id="mobileUsageText" class="text-xs font-medium text-indigo-700"></span>
                  <div class="w-2 h-2 rounded-full bg-indigo-500 pulse-animation"></div>
                </div>
              </div>
              <a href="/api/auth/logout" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-50 flex items-center">
                <i class="fas fa-sign-out-alt mr-2 text-gray-400"></i>
                Logout
              </a>
            </div>
          </div>
        </div>
      </nav>
    </div>
  </header>

  <!-- Main Content -->
  <main class="container mx-auto px-4 py-8">
    <div class="grid grid-cols-1 lg:grid-cols-12 gap-6">
      <!-- Upload Section -->
      <div class="lg:col-span-8">
        <div class="glass-card p-6 slide-in">
          <div class="mb-6">
            <h2 class="text-2xl font-bold text-gray-800 mb-2">Pemecah Masalah Matematika</h2>
            <p class="text-gray-600">Unggah soal matematika dan dapatkan solusi langkah demi langkah dengan AI canggih</p>
          </div>
          
          <form id="uploadForm">
            <div id="dropZone" class="drop-zone border-2 border-dashed border-gray-300 rounded-2xl p-8 text-center mb-6 cursor-pointer transition-all duration-300 hover:border-indigo-400">
              <input type="file" id="fileInput" accept="image/*" class="hidden">
              <div class="max-w-md mx-auto">
                <div class="gradient-bg w-16 h-16 mx-auto rounded-2xl flex items-center justify-center mb-4 text-white shadow-lg">
                  <i class="fas fa-cloud-upload-alt text-2xl"></i>
                </div>
                <h3 class="font-semibold text-gray-700 text-lg mb-1">Seret gambar ke sini</h3>
                <p class="text-gray-500 mb-3">atau klik untuk memilih file</p>
                <div class="inline-flex items-center px-4 py-2 bg-gray-100 rounded-full">
                  <i class="fas fa-camera mr-2 text-indigo-500"></i>
                  <span class="text-xs text-gray-600">Format: JPG, PNG (Maks 5MB)</span>
                </div>
              </div>
            </div>
            
            <div id="previewContainer" class="hidden mb-6">
              <div class="flex justify-between items-center mb-3">
                <span class="text-sm font-semibold text-gray-700 flex items-center">
                  <i class="fas fa-image mr-2 text-indigo-500"></i>
                  Pratinjau Gambar
                </span>
                <button type="button" id="clearPreview" class="text-xs text-red-500 hover:text-red-600 flex items-center">
                  <i class="fas fa-trash-alt mr-1"></i>
                  Hapus
                </button>
              </div>
              <div class="relative">
                <img id="previewImage" class="w-full max-h-72 object-contain rounded-xl border-2 border-gray-200" alt="Pratinjau Gambar">
                <div class="absolute inset-0 flex items-center justify-center bg-black bg-opacity-20 rounded-xl hidden" id="processingOverlay">
                  <div class="text-white text-center">
                    <div class="spinner rounded-full h-8 w-8 border-t-2 border-b-2 border-white mb-2 mx-auto animate-spin"></div>
                    <p class="text-sm">Memproses...</p>
                  </div>
                </div>
              </div>
            </div>
            
            <button type="submit" id="submitBtn" class="w-full gradient-bg hover:opacity-90 text-white font-semibold py-3 px-4 rounded-xl focus:outline-none transition-all duration-300 floating-btn flex items-center justify-center">
              <span id="submitText">
                <i class="fas fa-robot mr-2"></i>
                Selesaikan Soal
              </span>
              <svg id="submitSpinner" class="hidden animate-spin ml-2 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
              </svg>
            </button>
          </form>
        </div>
        
        <!-- Features Section -->
        <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mt-6">
          <div class="glass-card p-4 rounded-xl flex items-start">
            <div class="bg-indigo-100 p-2 rounded-lg mr-3 text-indigo-600">
              <i class="fas fa-bolt"></i>
            </div>
            <div>
              <h3 class="font-semibold text-gray-800">Cepat</h3>
              <p class="text-xs text-gray-600">Solusi instan dalam hitungan detik</p>
            </div>
          </div>
          <div class="glass-card p-4 rounded-xl flex items-start">
            <div class="bg-purple-100 p-2 rounded-lg mr-3 text-purple-600">
              <i class="fas fa-list-ol"></i>
            </div>
            <div>
              <h3 class="font-semibold text-gray-800">Langkah Demi Langkah</h3>
              <p class="text-xs text-gray-600">Penjelasan detail setiap langkah</p>
            </div>
          </div>
          <div class="glass-card p-4 rounded-xl flex items-start">
            <div class="bg-pink-100 p-2 rounded-lg mr-3 text-pink-600">
              <i class="fas fa-infinity"></i>
            </div>
            <div>
              <h3 class="font-semibold text-gray-800">Multi Topik</h3>
              <p class="text-xs text-gray-600">Aljabar, Geometri, Kalkulus, dll</p>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Solution Section -->
      <div class="lg:col-span-4">
        <div class="glass-card p-6 h-full">
          <div class="flex items-center justify-between mb-6">
            <div>
              <h2 class="text-xl font-bold text-gray-800">Solusi Matematika</h2>
              <p class="text-sm text-gray-600">Hasil analisis akan muncul di sini</p>
            </div>
            <div class="bg-indigo-100 text-indigo-700 px-2 py-1 rounded-full text-xs font-medium">
              <i class="fas fa-circle text-xs mr-1"></i>
              AI Aktif
            </div>
          </div>
          
          <div id="solutionContent" class="min-h-[300px]">
            <!-- Empty State -->
            <div id="emptyState" class="flex flex-col items-center justify-center py-12 text-center">
              <div class="gradient-bg rounded-2xl p-4 mb-5 text-white shadow-lg">
                <i class="fas fa-lightbulb text-3xl"></i>
              </div>
              <h3 class="font-semibold text-gray-700 text-lg mb-2">Belum ada soal yang diunggah</h3>
              <p class="text-gray-500 max-w-xs text-sm">Unggah gambar soal matematika untuk melihat solusi cerdas</p>
              <div class="mt-4 flex space-x-2">
                <div class="w-3 h-3 rounded-full bg-indigo-200 animate-bounce" style="animation-delay: 0s"></div>
                <div class="w-3 h-3 rounded-full bg-indigo-300 animate-bounce" style="animation-delay: 0.2s"></div>
                <div class="w-3 h-3 rounded-full bg-indigo-400 animate-bounce" style="animation-delay: 0.4s"></div>
              </div>
            </div>
            
            <!-- Loading State -->
            <div id="loadingState" class="hidden flex flex-col items-center justify-center py-12">
              <div class="relative w-16 h-16 mb-5">
                <div class="absolute inset-0 rounded-full border-4 border-t-indigo-500 border-r-indigo-500 border-b-transparent border-l-transparent animate-spin"></div>
                <div class="absolute inset-2 rounded-full border-4 border-t-indigo-400 border-r-indigo-400 border-b-transparent border-l-transparent animate-spin" style="animation-direction: reverse"></div>
              </div>
              <p class="text-gray-600 font-medium">Menganalisis soal...</p>
              <p class="text-xs text-gray-500 mt-1">Tunggu sebentar, AI sedang bekerja</p>
            </div>
            
            <!-- Solution Result -->
            <div id="solutionResult" class="hidden h-full">
              <div class="flex justify-between items-center mb-4">
                <h3 class="font-semibold text-gray-800 flex items-center">
                  <i class="fas fa-clipboard-list mr-2 text-indigo-500"></i>
                  Detail Solusi
                </h3>
                <div class="flex space-x-2">
                  <button id="copySolution" class="text-xs bg-indigo-50 text-indigo-600 hover:bg-indigo-100 px-3 py-1 rounded-full flex items-center transition-colors">
                    <i class="fas fa-copy mr-1"></i>
                    Salin
                  </button>
                  <button id="downloadSolution" class="text-xs bg-gray-100 text-gray-600 hover:bg-gray-200 px-3 py-1 rounded-full flex items-center transition-colors">
                    <i class="fas fa-download mr-1"></i>
                    PDF
                  </button>
                </div>
              </div>
              <div id="solutionText" class="prose max-w-none solution-text-container bg-gray-50 rounded-xl p-4 max-h-[500px] overflow-y-auto"></div>
              
              <div class="mt-4 pt-4 border-t border-gray-200">
                <div class="flex items-center justify-between">
                  <div class="flex items-center">
                    <div class="w-8 h-8 rounded-full gradient-bg text-white flex items-center justify-center mr-2">
                      <i class="fas fa-thumbs-up text-sm"></i>
                    </div>
                    <span class="text-sm text-gray-600">Apakah solusi ini membantu?</span>
                  </div>
                  <div class="flex space-x-2">
                    <button class="w-8 h-8 rounded-full bg-gray-100 text-gray-600 hover:bg-gray-200 flex items-center justify-center transition-colors">
                      <i class="fas fa-thumbs-up"></i>
                    </button>
                    <button class="w-8 h-8 rounded-full bg-gray-100 text-gray-600 hover:bg-gray-200 flex items-center justify-center transition-colors">
                      <i class="fas fa-thumbs-down"></i>
                    </button>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </main>

  <!-- Floating Help Button -->
  <button class="fixed bottom-6 right-6 w-14 h-14 rounded-full gradient-bg text-white shadow-xl flex items-center justify-center floating-btn z-40">
    <i class="fas fa-question text-xl"></i>
  </button>

  <!-- Modern Toast Notification -->
  <div id="toastContainer" class="fixed bottom-4 left-1/2 transform -translate-x-1/2 space-y-2 z-50 w-full max-w-xs sm:max-w-md px-4"></div>

  <script>
    // Check authentication
    const token = new URLSearchParams(window.location.search).get('token');
    if (!token) {
      window.location.href = '/login.html';
    }

    // DOM Elements
    const profileBtn = document.getElementById('profileBtn');
    const profileDropdown = document.getElementById('profileDropdown');
    const dropZone = document.getElementById('dropZone');
    const fileInput = document.getElementById('fileInput');
    const previewContainer = document.getElementById('previewContainer');
    const previewImage = document.getElementById('previewImage');
    const uploadForm = document.getElementById('uploadForm');
    const submitBtn = document.getElementById('submitBtn');
    const submitText = document.getElementById('submitText');
    const submitSpinner = document.getElementById('submitSpinner');
    const solutionContent = document.getElementById('solutionContent');
    const emptyState = document.getElementById('emptyState');
    const loadingState = document.getElementById('loadingState');
    const solutionResult = document.getElementById('solutionResult');
    const solutionText = document.getElementById('solutionText');
    const copySolutionBtn = document.getElementById('copySolution');
    const desktopUsageDisplay = document.getElementById('desktopUsageDisplay');
    const mobileUsageDisplay = document.getElementById('mobileUsageDisplay');
    const usageDisplay = document.getElementById('usageDisplay');
    const mobileUsageText = document.getElementById('mobileUsageText');
    const processingOverlay = document.getElementById('processingOverlay');

    // Load user profile
    async function loadProfile() {
      try {
        const res = await fetch('/api/auth/profile', {
          headers: { 'Authorization': `Bearer ${token}` }
        });
        
        if (!res.ok) {
          if (res.status === 401 || res.status === 403) {
            window.location.href = '/login.html';
          }
          throw new Error('Failed to load profile');
        }
        
        const data = await res.json();
        if (data.name && data.email) {
          document.getElementById('profileInitial').textContent = data.name.charAt(0).toUpperCase();
          document.getElementById('profileName').textContent = data.name;
          document.getElementById('profileEmail').textContent = data.email;
        }
      } catch (err) {
        console.error('Profile load error:', err);
        showToast('Gagal memuat profil', 'error');
      }
    }

    // Toggle profile dropdown
    profileBtn.addEventListener('click', (e) => {
      e.stopPropagation();
      profileDropdown.classList.toggle('hidden');
    });

    // Close dropdown when clicking outside
    document.addEventListener('click', () => {
      profileDropdown.classList.add('hidden');
    });

    // File upload handling
    dropZone.addEventListener('click', () => fileInput.click());
    
    // Drag and drop events
    ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
      dropZone.addEventListener(eventName, preventDefaults, false);
    });

    function preventDefaults(e) {
      e.preventDefault();
      e.stopPropagation();
    }

    ['dragenter', 'dragover'].forEach(eventName => {
      dropZone.addEventListener(eventName, () => {
        dropZone.classList.add('drop-zone-active');
        dropZone.classList.add('border-indigo-400');
      }, false);
    });

    ['dragleave', 'drop'].forEach(eventName => {
      dropZone.addEventListener(eventName, () => {
        dropZone.classList.remove('drop-zone-active');
        dropZone.classList.remove('border-indigo-400');
      }, false);
    });

    dropZone.addEventListener('drop', handleDrop, false);

    function handleDrop(e) {
      const files = e.dataTransfer.files;
      if (files.length) {
        fileInput.files = files;
        handleFiles(files);
      }
    }

    fileInput.addEventListener('change', () => {
      if (fileInput.files.length) {
        handleFiles(fileInput.files);
      }
    });

    document.getElementById('clearPreview').addEventListener('click', () => {
      previewContainer.classList.add('hidden');
      previewImage.src = '';
      fileInput.value = '';
    });

    function handleFiles(files) {
      const file = files[0];
      if (!file.type.match('image.*')) {
        showToast('Hanya file gambar yang diperbolehkan', 'error');
        return;
      }
      
      if (file.size > 5 * 1024 * 1024) {
        showToast('Ukuran file terlalu besar. Maksimum 5MB.', 'error');
        fileInput.value = '';
        return;
      }
      
      // Show processing overlay briefly
      processingOverlay.classList.remove('hidden');
      
      const reader = new FileReader();
      reader.onload = (e) => {
        previewImage.src = e.target.result;
        previewContainer.classList.remove('hidden');
        
        // Hide processing overlay after a short delay
        setTimeout(() => {
          processingOverlay.classList.add('hidden');
        }, 500);
      };
      reader.readAsDataURL(file);
    }

    // Form submission
    uploadForm.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const imageFile = fileInput.files[0];
      if (!imageFile) {
        showToast('Pilih gambar terlebih dahulu', 'error');
        return;
      }

      // Show loading state
      emptyState.classList.add('hidden');
      solutionResult.classList.add('hidden');
      loadingState.classList.remove('hidden');
      
      // Disable submit button
      submitBtn.disabled = true;
      submitText.innerHTML = '<i class="fas fa-cog animate-spin mr-2"></i> Memproses...';
      submitSpinner.classList.remove('hidden');

      const formData = new FormData();
      formData.append('image', imageFile);

      try {
        const res = await fetch('/api/upload', {
          method: 'POST',
          headers: { 'Authorization': `Bearer ${token}` },
          body: formData
        });
        
        const data = await res.json();
        
        if (!res.ok) {
          if (res.status === 401 || res.status === 403) {
            window.location.href = '/login.html';
          }
          throw new Error(data.error || 'Server error');
        }

        // Show solution
        loadingState.classList.add('hidden');
        solutionText.innerHTML = data.formatted_response || data.response;
        solutionResult.classList.remove('hidden');
        
        // Add fade-in effect
        solutionResult.classList.add('fade-in');
        
        // Update usage display
        if (data.usage) {
          updateUsageDisplay(data.usage.used, data.usage.limit);
        }
        
        // Show warning if available
        if (data.warning) {
          showToast(data.warning, 'warning');
        }
        
        // Render MathJax
        if (window.MathJax) {
          MathJax.typesetPromise();
        }
      } catch (err) {
        console.error('Upload error:', err);
        showToast(err.message || 'Gagal memproses gambar', 'error');
        loadingState.classList.add('hidden');
        emptyState.classList.remove('hidden');
      } finally {
        // Reset submit button
        submitBtn.disabled = false;
        submitText.innerHTML = '<i class="fas fa-robot mr-2"></i> Selesaikan Soal';
        submitSpinner.classList.add('hidden');
      }
    });

    // Copy solution
    copySolutionBtn.addEventListener('click', () => {
      const solution = solutionText.textContent;
      navigator.clipboard.writeText(solution).then(() => {
        showToast('Solusi berhasil disalin', 'success');
      }).catch(err => {
        console.error('Copy failed:', err);
        showToast('Gagal menyalin solusi', 'error');
      });
    });

    // Download as PDF (mock functionality)
    document.getElementById('downloadSolution').addEventListener('click', () => {
      showToast('Fitur ekspor PDF akan segera hadir!', 'info');
    });

    // Update usage display
    function updateUsageDisplay(used, limit) {
      const percentage = Math.round((used / limit) * 100);
      const usageText = `${used} dari ${limit} (${percentage}%)`;
      usageDisplay.textContent = usageText;
      mobileUsageText.textContent = usageText;
      
      if (percentage >= 80) {
        usageDisplay.classList.add('text-red-500');
        usageDisplay.classList.remove('text-indigo-700');
        mobileUsageText.classList.add('text-red-500');
        mobileUsageText.classList.remove('text-indigo-700');
      } else {
        usageDisplay.classList.remove('text-red-500');
        usageDisplay.classList.add('text-indigo-700');
        mobileUsageText.classList.remove('text-red-500');
        mobileUsageText.classList.add('text-indigo-700');
      }
    }

    // Show modern toast notification
    function showToast(message, type = 'info') {
      const toastContainer = document.getElementById('toastContainer');
      const toast = document.createElement('div');
      
      // Base classes
      toast.className = 'flex items-center w-full p-4 rounded-lg shadow-lg text-white overflow-hidden transform transition-all duration-300 slide-in';
      
      // Type specific classes
      if (type === 'error') {
        toast.className += ' bg-red-500';
        toast.innerHTML = `
          <div class="mr-3 flex-shrink-0">
            <i class="fas fa-exclamation-circle text-xl"></i>
          </div>
          <div class="flex-grow">
            ${message}
          </div>
          <button class="ml-3 text-white opacity-70 hover:opacity-100">
            <i class="fas fa-times"></i>
          </button>
        `;
      } else if (type === 'success') {
        toast.className += ' bg-green-500';
        toast.innerHTML = `
          <div class="mr-3 flex-shrink-0">
            <i class="fas fa-check-circle text-xl"></i>
          </div>
          <div class="flex-grow">
            ${message}
          </div>
          <button class="ml-3 text-white opacity-70 hover:opacity-100">
            <i class="fas fa-times"></i>
          </button>
        `;
      } else if (type === 'warning') {
        toast.className += ' bg-yellow-500';
        toast.innerHTML = `
          <div class="mr-3 flex-shrink-0">
            <i class="fas fa-exclamation-triangle text-xl"></i>
          </div>
          <div class="flex-grow">
            ${message}
          </div>
          <button class="ml-3 text-white opacity-70 hover:opacity-100">
            <i class="fas fa-times"></i>
          </button>
        `;
      } else {
        toast.className += ' bg-indigo-500';
        toast.innerHTML = `
          <div class="mr-3 flex-shrink-0">
            <i class="fas fa-info-circle text-xl"></i>
          </div>
          <div class="flex-grow">
            ${message}
          </div>
          <button class="ml-3 text-white opacity-70 hover:opacity-100">
            <i class="fas fa-times"></i>
          </button>
        `;
      }
      
      // Add close button functionality
      const closeBtn = toast.querySelector('button');
      closeBtn.addEventListener('click', () => {
        toast.classList.add('opacity-0');
        setTimeout(() => toast.remove(), 300);
      });
      
      toastContainer.appendChild(toast);
      
      // Auto remove after 3 seconds
      setTimeout(() => {
        toast.classList.add('opacity-0');
        setTimeout(() => toast.remove(), 300);
      }, 3000);
    }

    // Initialize
    loadProfile();
    updateUsageDisplay(0, 10);
  </script>
</body>
</html>